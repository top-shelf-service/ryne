// firestore.rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }
    function uid() {
      return request.auth.uid;
    }

    // Users profile (minimal public self)
    match /users/{userId} {
      allow read: if isSignedIn() && userId == uid();
      allow create: if isSignedIn() && userId == uid();
      allow update: if isSignedIn() && userId == uid();
      allow delete: if false;
    }

    // Organizations collection
    match /orgs/{orgId} {
      // org document (name, ownerId, createdAt…)
      allow read: if isSignedIn() && exists(/databases/$(database)/documents/orgs/$(orgId)/members/$(uid()));
      allow create: if isSignedIn(); // server creates; client may not directly write in prod, but allowed for dev
      allow update, delete: if false;

      // Memberships: orgs/{orgId}/members/{uid}
      match /members/{memberId} {
        allow read: if isSignedIn() && memberId == uid();
        allow create: if isSignedIn() && memberId == uid();
        allow update: if isSignedIn() && memberId == uid();
        allow delete: if false;
      }

      // Invite tokens (server‑created). Clients can read by token to accept.
      match /invites/{token} {
        allow read: if isSignedIn();
        allow create, update, delete: if false; // server only
      }
    }
  }
}
