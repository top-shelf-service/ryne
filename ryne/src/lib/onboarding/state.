import crypto from "node:crypto";
import { useMockOnboarding, isProduction } from "@/config/env";
import { getMockSnapshot } from "./mock";
import { db } from "@/lib/db-mock";

export type CompletionState = {
  complete: boolean;
  nextStep?: string;
  etag: string;
  updatedAt: number;
};

const memoryKV = new Map<string, CompletionState>();

export function cacheKey(userId: string, orgId: string) {
  return `onb:${orgId}:${userId}`;
}

export function computeEtag(snapshot: Record<string, any>) {
  const s = JSON.stringify(snapshot);
  return crypto.createHash("sha256").update(s).digest("hex").slice(0, 16);
}

export async function getCachedState(userId: string, orgId: string): Promise<CompletionState | null> {
  const key = cacheKey(userId, orgId);
  const v = memoryKV.get(key);
  if (!v) return null;
  if (Date.now() - v.updatedAt > 5 * 60 * 1000) { // 5m TTL
    memoryKV.delete(key);
    return null;
  }
  return v;
}

export async function setCachedState(userId: string, orgId: string, state: CompletionState) {
  memoryKV.set(cacheKey(userId, orgId), { ...state, updatedAt: Date.now() });
}

export async function loadOnboardingSnapshot(userId: string, orgId: string): Promise<Record<string, any>> {
  if (useMockOnboarding()) {
    return getMockSnapshot();
  }
  // Pull from dev in-memory DB if present
  const snap = db.getOnboarding(orgId, userId);
  if (snap) return snap;

  // Production default (fail-closed toward I-9)
  if (isProduction()) {
    return {
      user: { emailOrPhone: null, authMethod: null, verified: false, role: "staff" },
      membership: { choice: "join", orgId, role: "staff" },
      org: { orgUid: orgId, legalName: "", timezone: "", country: "", joinCode: "" },
      i9: {
        section1: { completed: false, date: null },
        section2: { completed: false, reviewer: null, date: null },
        docsUploaded: [],
        eVerify: { submitted: false, caseId: null },
        status: "pending"
      }
    };
  }

  // Non-prod fallback
  return {
    user: { emailOrPhone: "dev@example.com", authMethod: "password", verified: false, role: "staff" },
    membership: { choice: "join", orgId, role: "staff" },
    org: { orgUid: orgId, legalName: "Dev Org", timezone: "America/Chicago", country: "US", joinCode: "ABCD2345" },
    i9: {
      section1: { completed: false, date: null },
      section2: { completed: false, reviewer: null, date: null },
      docsUploaded: [],
      eVerify: { submitted: false, caseId: null },
      status: "pending"
    }
  };
}
